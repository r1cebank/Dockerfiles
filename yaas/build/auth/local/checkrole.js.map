{"version":3,"sources":["auth/local/checkrole.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;gCAQiC,yBAAyB;;;;sBACzB,QAAQ;;;;AAEzC,SAAS,SAAS,CAAE,IAAI,EAAE,IAAI,EAAE;;;;;;AAM5B,MAAI,GAAG,GAAG,sBAAsB,CAAC;;AAEjC,MAAG,oBAAE,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;AAC7B,kCAAa,WAAW,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;AACpE,WAAO,IAAI,CAAC;GACf,MAAM;AACH,kCAAa,WAAW,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,yBAAyB,CAAC,CAAC;AACrE,WAAO,KAAK,CAAC;GAChB;CACJ;;qBAEc,EAAC,SAAS,EAAT,SAAS,EAAC","file":"auth/local/checkrole.js","sourcesContent":["/**\n * Created by r1cebank on 8/24/15.\n */\n\n/*!\n *  This is the checkrole method, input is a list of roles that user is the user with roles\n */\n\nimport AppSingleton         from '../../util/appsingleton';\nimport _                    from 'lodash';\n\nfunction checkrole (user, role) {\n\n    /*  Any role will be permitted, but will check user to see if the user is coming from the none checkauth\n     *  If user doesn't equal no auth, we will fail.\n     */\n\n    let TAG = 'auth:local:checkrole';\n\n    if(_.includes(user.roles, role)) {\n        AppSingleton.getInstance().L.verbose(TAG, 'local is passing allow');\n        return true;\n    } else {\n        AppSingleton.getInstance().L.verbose(TAG, 'local is passing refuse');\n        return false;\n    }\n}\n\nexport default {checkrole};"],"sourceRoot":"/source/"}