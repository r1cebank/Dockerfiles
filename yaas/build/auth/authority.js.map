{"version":3,"sources":["auth/authority.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;gCASiC,sBAAsB;;;;sBACtB,QAAQ;;;;IAEnC,SAAS;;;;AAGA,aAHT,SAAS,CAGC,IAAI,EAAE;;;;;8BAHhB,SAAS;;;AAKP,YAAI,CAAC,GAAG,kBAAgB,IAAI,AAAE,CAAC;;AAE/B,YAAI,CAAC,SAAS,GAAG,UAAC,CAAC,EAAK;AAAC,0CAAa,WAAW,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAK,GAAG,+BAA+B,CAAC;SAAC,CAAC;AACtG,YAAI,CAAC,SAAS,GAAG,UAAC,CAAC,EAAK;AAAC,0CAAa,WAAW,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAK,GAAG,+BAA+B,CAAC;SAAC,CAAC;;AAEtG,sCAAa,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,oBAAoB,CAAC;;AAE/D,4BAAE,MAAM,CAAC,IAAI,EAAE,OAAO,QAAM,IAAI,mBAAgB,CAAC,CAAC;AAClD,4BAAE,MAAM,CAAC,IAAI,EAAE,OAAO,QAAM,IAAI,mBAAgB,CAAC,CAAC;AAClD,sCAAa,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,6BAA6B,CAAC;KAC3E;;;;;;;;;;;;;;;;;;;;;;;;;;iBAfC,SAAS;;eAwCJ,iBAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;;;AAGpB,gBAAI,OAAO,GAAG,oBAAE,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,EAAE,EAAE,GAAG,CAAC,KAAK,IAAI,EAAE,EAAE,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;;;AAG1E,gBAAG,8BAAa,WAAW,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;;;AAGjD,oBAAI,IAAI,GAAG,8BAAa,WAAW,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC5D,8CAAa,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,gCAA8B,IAAI,CAAG,CAAC;AAChF,oBAAI,CAAC,SAAS,GAAG,OAAO,QAAM,IAAI,mBAAgB,CAAC,SAAS,CAAC;AAC7D,oBAAI,CAAC,SAAS,GAAG,OAAO,QAAM,IAAI,mBAAgB,CAAC,SAAS,CAAC;aAChE;;;AAGD,gBAAI;AACA,oBAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAC3C,CAAC,OAAO,CAAC,EAAE;AACR,mBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,CAAC,EAAC,CAAC,CAAC;AACjC,uBAAO,KAAK,CAAC;aAChB;;AAGD,gBAAG,CAAC,IAAI,EAAE;AACN,mBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,uBAAqB,IAAI,CAAC,GAAG,AAAE,EAAC,CAAC,CAAC;AAC7D,uBAAO,KAAK,CAAC;aAChB,MAAM;AACH,oBAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;AAC5B,uBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,EAAK,OAAO,CAAC,IAAI,2BAAsB,IAAI,AAAE,EAAC,CAAC,CAAC;AAC3E,2BAAO,KAAK,CAAC;iBAChB,MAAM;AACH,+BAAO,IAAI,CAAC;qBACf;aACJ;SACJ;;;WA3EC,SAAS;;;qBA8EA,SAAS","file":"auth/authority.js","sourcesContent":["/**\n * Created by r1cebank on 8/24/15.\n */\n\n/*!\n *  This is the authority file, which handles all authority in the app\n *  it will load the appropriate handling functions based on the type\n */\n\nimport  AppSingleton        from '../util/appsingleton';\nimport  _                   from 'lodash';\n\nclass Authority {\n\n    //  Constructor will load the appropriate methods based on type\n    constructor(type) {\n        //  Log tags\n        this.TAG = `authority:${type}`;\n        //  Supress warnings\n        this.checkauth = (a) => {AppSingleton.getInstance().L.error(this.TAG, `this should not be printed`);};\n        this.checkrole = (u) => {AppSingleton.getInstance().L.error(this.TAG, `this should not be printed`);};\n\n        AppSingleton.getInstance().L.info(this.TAG, `loading modules`);\n\n        _.assign(this, require(`./${type}/checkauth.js`));\n        _.assign(this, require(`./${type}/checkrole.js`));\n        AppSingleton.getInstance().L.info(this.TAG, `modules loading complete`);\n    }\n\n    ///*!\n    // *  For Express, we added these functions to help the authenticate\n    // *  This also need to be a Express middleware\n    // */\n    //authenticate(req, res) {\n    //\n    //    //  To make sure we always have the auth field, we need to combine all the request params\n    //    var request = _.extend(req.params || {}, req.query || {}, req.body || {});\n    //\n    //    //  Checkath will return the user if login correct or return undefined if error occured\n    //    var user = this.checkauth(request.auth);\n    //    console.log(user)\n    //    if(!user) {\n    //        res.status(403).send({error: `auth failed for ${this.TAG}`});\n    //        return false;\n    //    } else {\n    //        return true;\n    //    }\n    //}\n\n    /*!\n     *  After authenticate is finished running, we need to check if the user is authenticated for that role\n     */\n    hasRole(req, res, role) {\n\n        //  To make sure we always have the auth field, we need to combine all the request params\n        var request = _.extend(req.params || {}, req.query || {}, req.body || {});\n\n        //  Check if overwrite exist for this role, if exist, overwrite the checkauth and check role function\n        if(AppSingleton.getInstance().auth.overwrites[role]) {\n\n            //  Get overwrite auth type\n            var type = AppSingleton.getInstance().auth.overwrites[role];\n            AppSingleton.getInstance().L.warn(this.TAG, `overwrite auth method to ${type}`);\n            this.checkauth = require(`./${type}/checkauth.js`).checkauth;\n            this.checkrole = require(`./${type}/checkrole.js`).checkrole;\n        }\n\n        //  Checkath will return the user if login correct or return undefined if error occured\n        try {\n            var user = this.checkauth(request.auth);\n        } catch (e) {\n            res.status(400).send({error: e});\n            return false;\n        }\n\n\n        if(!user) {\n            res.status(403).send({error: `auth failed for ${this.TAG}`});\n            return false;\n        } else {\n            if(!this.checkrole(user, role)) {\n                res.status(403).send({error: `${request.auth} not permitted for ${role}`});\n                return false;   //  We still need to return since the value will be used to wrapped in if\n            } else {\n                return true;\n            }\n        }\n    }\n}\n\nexport default Authority;"],"sourceRoot":"/source/"}