{"version":3,"sources":["util/startup.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;4BAS6B,gBAAgB;;;;wBAChB,UAAU;;;;4BACV,kBAAkB;;;;AAE/C,SAAS,OAAO,GAAG;;;AAGf,QAAI,GAAG,GAAG,SAAS,CAAC;;;AAGpB,QAAI,cAAc,GAAG,0BAAa,WAAW,EAAE,CAAC;;AAEhD,WAAO,0BAAY,UAAC,OAAO,EAAK;;;;;AAK5B,sBAAc,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE;AAChG,gBAAG,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,eAAe,CAAC,EAAE;AAC5D,0CAAO,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,SAAM,EAAE,CAAC,IAAI,EAAE,CAAC;aACjD;SACJ,CAAC,CAAC;;AAEH,sBAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AACnD,gBAAG,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,eAAe,CAAC,EAAE;AAC5D,0CAAO,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,SAAM,EAAE,CAAC,IAAI,EAAE,CAAC;aACjD;SACJ,CAAC,CAAC;;AAEH,sBAAc,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;;;;;AAKhD,gBAAG,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,WAAW,CAAC,EAAE;AACxD,0CAAO,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,SAAM,EAAE,CAAC,IAAI,EAAE,CAAC;aACrD;SACJ,CAAC,CAAC;;AAEH,sBAAc,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AACnD,gBAAG,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,aAAa,CAAC,EAAE;AAC1D,0CAAO,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,SAAM,EAAE,CAAC,IAAI,EAAE,CAAC;aACnD;SACJ,CAAC,CAAC;;AAEH,sBAAc,CAAC,GAAG,CAAC,GAAG,CAAC,yBAAyB,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AAClE,gBAAG,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,cAAc,CAAC,EAAE;AAC3D,0CAAO,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,SAAM,EAAE,CAAC,IAAI,EAAE,CAAC;aACtD;SACJ,CAAC,CAAC;;AAEH,sBAAc,CAAC,GAAG,CAAC,GAAG,CAAC,oBAAoB,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AAC7D,gBAAG,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,UAAU,CAAC,EAAE;AACvD,0CAAO,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,SAAM,EAAE,CAAC,IAAI,EAAE,CAAC;aAClD;SAEJ,CAAC,CAAC;AACH,eAAO,CAAC,EAAG,CAAC,CAAC;KAChB,CAAC,CAAC;CAEN;qBACc,OAAO","file":"util/startup.js","sourcesContent":["/**\n * Created by r1cebank on 8/19/15.\n */\n\n/*!\n *  After bootstrap, all the necessary promises, values are defined in AppSingleton\n *  In startup.js we will begin loading the appropriate routes, settings\n */\n\nimport AppSingleton     from './appsingleton';\nimport Promise          from 'bluebird';\nimport Routes           from '../routes/routes';\n\nfunction startup() {\n\n    //  Log tag\n    var TAG = \"startup\";\n\n    //  This instance is shared across the entire app life-cycle\n    var sharedInstance = AppSingleton.getInstance();\n\n    return new Promise((resolve) => {\n\n        //  Setup routes for app\n\n        //  Setup upload\n        sharedInstance.app.post('/:bucket/upload', sharedInstance.upload.single('file'), function(req, res) {\n            if(sharedInstance.authority.hasRole(req, res, 'bucket:upload')) {\n                Routes.upload(req, res).then().catch().done();\n            }\n        });\n        //  Bucket creation path\n        sharedInstance.app.post('/bucket', function (req, res) {\n            if(sharedInstance.authority.hasRole(req, res, 'bucket:create')) {\n                Routes.bucket(req, res).then().catch().done();\n            }\n        });\n        //  List all buckets\n        sharedInstance.app.get('/list', function (req, res) {\n\n            /*!\n             *  Looks like cannot use as middleware.\n             */\n            if(sharedInstance.authority.hasRole(req, res, 'yaas:list')) {\n                Routes.listbucket(req, res).then().catch().done();\n            }\n        });\n        //  List all files in bucket\n        sharedInstance.app.get('/:bucket', function (req, res) {\n            if(sharedInstance.authority.hasRole(req, res, 'bucket:list')) {\n                Routes.listfile(req, res).then().catch().done();\n            }\n        });\n        //  List all versions for file\n        sharedInstance.app.get('/:bucket/:filename/list', function (req, res) {\n            if(sharedInstance.authority.hasRole(req, res, 'version:list')) {\n                Routes.listversion(req, res).then().catch().done();\n            }\n        });\n        //  Get uploaded file\n        sharedInstance.app.get('/:bucket/:filename', function (req, res) {\n            if(sharedInstance.authority.hasRole(req, res, 'file:get')) {\n                Routes.getfile(req, res).then().catch().done();\n            }\n\n        });\n        resolve({ });\n    });\n\n}\nexport default startup;\n"],"sourceRoot":"/source/"}