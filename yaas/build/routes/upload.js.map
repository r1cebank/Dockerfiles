{"version":3,"sources":["routes/upload.js"],"names":[],"mappings":";;;;;;;;;;;;;gCAK6B,sBAAsB;;;;wBACtB,UAAU;;;;uBACV,SAAS;;;;oBACT,MAAM;;;;uBACN,UAAU;;;;sBACV,QAAQ;;;;kBACR,IAAI;;;;AAEjC,SAAS,MAAM,CAAE,GAAG,EAAE,GAAG,EAAE;;;AAGvB,QAAI,GAAG,GAAG,cAAc,CAAC;;;AAGzB,QAAI,cAAc,GAAG,8BAAa,WAAW,EAAE,CAAC;;AAEhD,WAAO,0BAAY,UAAC,OAAO,EAAK;;;AAG5B,YAAG,CAAC,GAAG,CAAC,IAAI,EAAE;AACV,eAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,mBAAmB,EAAC,CAAC,CAAC;AACnD,mBAAO,CAAC,EAAG,CAAC,CAAC;SAChB,MAAM;AACH,gBAAI,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAClE,kBAAM,CAAC,OAAO,CAAC,EAAC,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,YAAY,EAAC,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AACtE,oBAAI,GAAG,EAAE;;;;AAIL,wBAAI,OAAO,GAAG,qBAAQ,QAAQ,EAAE,CAAC;;AAEjC,wBAAI,IAAI,GAAG,oBAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AACxB,wBAAI,CAAC,QAAQ,GAAG,oBAAE,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtC,wBAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;AACvC,wBAAI,CAAC,aAAa,GAAG,OAAO,CAAC;AAC7B,0BAAM,CAAC,MAAM,CAAC,EAAC,YAAY,EAAE,GAAG,CAAC,IAAI,CAAC,YAAY,EAAC,EAAE;AAC7C,4BAAI,EAAE;AACF,oCAAQ,EAAE,IAAI,CAAC,QAAQ;AACvB,yCAAa,EAAE,OAAO;yBACzB;qBACJ,EACD,UAAU,KAAK,EAAE,GAAG,EAAE;AAClB,2BAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACf,sCAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,YAAU,IAAI,CAAC,YAAY,0BAAqB,IAAI,CAAC,aAAa,CAAG,CAAC;qBAClG,CAAC,CAAC;iBACV,MACI;;AAED,wBAAI,OAAO,GAAG,qBAAQ,QAAQ,EAAE,CAAC;;;AAGjC,wBAAI,QAAQ,GAAG,EAAE,CAAC;AAClB,4BAAQ,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;;;AAGlC,wBAAI,IAAI,GAAG,oBAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC7B,wBAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,wBAAI,CAAC,aAAa,GAAG,OAAO,CAAC;AAC7B,wBAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,0BAAQ,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAC3D,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;;AAG9C,0BAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AACpC,sCAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;qBAC/C,CAAC,CAAC;AACH,uBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAClB;aACJ,CAAC,CAAC;AACH,mBAAO,CAAC,EAAE,CAAC,CAAC;SACf;KACJ,CAAC,CAAC;CAEN;;qBAEc,MAAM","file":"routes/upload.js","sourcesContent":["/**\n * Created by r1cebank on 8/20/15.\n */\n\n\nimport AppSingleton     from '../util/appsingleton';\nimport Promise          from 'bluebird';\nimport Shortid          from 'shortid';\nimport Path             from 'path';\nimport UrlJoin          from 'url-join';\nimport _                from 'lodash';\nimport Fs               from 'fs';\n\nfunction upload (req, res) {\n\n    //  Log tag\n    let TAG = \"route:upload\";\n\n    //  Get shared instance from singleton\n    var sharedInstance = AppSingleton.getInstance();\n\n    return new Promise((resolve) => {\n\n        //  If no file supplied, error back\n        if(!req.file) {\n            res.status(404).send({error: \"file not supplied\"});\n            resolve({ });\n        } else {\n            var bucket = sharedInstance.buckets.collection(req.params.bucket);\n            bucket.findOne({originalname: req.file.originalname}, function (err, doc) {\n                if (doc) {\n                    //  File exists, uploading a new version.\n\n                    //  We have a new file, generate a new version code\n                    var version = Shortid.generate();\n\n                    var file = _.clone(doc);\n                    file.versions = _.clone(doc.versions);\n                    file.versions[version] = req.file.path;\n                    file.latestversion = version;\n                    bucket.update({originalname: req.file.originalname}, {\n                            $set: {\n                                versions: file.versions,\n                                latestversion: version\n                            }\n                        },\n                        function (error, doc) {\n                            res.send(file);\n                            sharedInstance.L.info(TAG, `file ${file.originalname} updated, version ${file.latestversion}`);\n                        });\n                }\n                else {\n\n                    var version = Shortid.generate();\n\n                    //  We have a new file, generate a new version code\n                    var versions = {};\n                    versions[version] = req.file.path;\n\n                    //  Clone the file object\n                    var file = _.clone(req.file);\n                    file.versions = versions;\n                    file.latestversion = version;\n                    file.url = file.url = UrlJoin(sharedInstance.config.server.host,\n                        req.params.bucket, req.file.originalname);\n\n                    //  Insert the record into bucket\n                    bucket.insert(file, function (err, doc) {\n                        sharedInstance.L.info(TAG, \"file uploaded\");\n                    });\n                    res.send(file);\n                }\n            });\n            resolve({});\n        }\n    });\n\n}\n\nexport default upload;"],"sourceRoot":"/source/"}