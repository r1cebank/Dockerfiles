{"version":3,"sources":["routes/listversion.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;gCAO6B,sBAAsB;;;;wBACtB,UAAU;;;;uBACV,SAAS;;;;oBACT,MAAM;;;;uBACN,UAAU;;;;sBACV,QAAQ;;;;AAErC,SAAS,WAAW,CAAE,GAAG,EAAE,GAAG,EAAE;;;AAG5B,QAAI,GAAG,GAAG,cAAc,CAAC;;;AAGzB,QAAI,cAAc,GAAG,8BAAa,WAAW,EAAE,CAAC;;AAEhD,WAAO,0BAAY,UAAC,OAAO,EAAK;;;AAG5B,YAAI,MAAM,GAAG,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;;;AAGlE,cAAM,CAAC,OAAO,CAAC,EAAC,YAAY,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAC,EAAE,UAAU,GAAG,EAAE,GAAG,EAAE;AACpE,gBAAG,CAAC,GAAG,EAAE;;AAEL,mBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,KAAK,YAAU,GAAG,CAAC,MAAM,CAAC,QAAQ,gBAAa,EAAC,CAAC,CAAC;aAC3E,MACI;;AAED,oBAAI,IAAI,GAAG,EAAG,CAAC;;;;;;AACf,yCAAe,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,8HAAE;4BAAlC,GAAG;;AACP,4BAAI,CAAC,IAAI,CAAC,0BAAQ,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAC/C,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,QAAQ,UAAQ,GAAG,CAAG,CAAC,CAAC;qBAC7D;;;;;;;;;;;;;;;;AACD,mBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAClB;SACJ,CAAC,CAAC;AACH,eAAO,CAAC,EAAG,CAAC,CAAC;KAChB,CAAC,CAAC;CAEN;;qBAEc,WAAW","file":"routes/listversion.js","sourcesContent":["/**\n * Created by r1cebank on 8/22/15.\n */\n\n/*!\n *  This is the list version role, we will need this to list all the file versions for a file\n */\nimport AppSingleton     from '../util/appsingleton';\nimport Promise          from 'bluebird';\nimport Shortid          from 'shortid';\nimport Path             from 'path';\nimport UrlJoin          from 'url-join';\nimport _                from 'lodash';\n\nfunction listversion (req, res) {\n\n    //  Log tag\n    let TAG = \"route:upload\";\n\n    //  Get shared instance from singleton\n    var sharedInstance = AppSingleton.getInstance();\n\n    return new Promise((resolve) => {\n\n        //  Open the nedb file to query later\n        var bucket = sharedInstance.buckets.collection(req.params.bucket);\n\n        //  Query the file\n        bucket.findOne({originalname: req.params.filename}, function (err, doc) {\n            if(!doc) {\n                //  If file is not found, send 404 and a error\n                res.status(404).send({error: `file ${req.params.filename} not found.`});\n            }\n            else {\n                //  List all versions\n                var urls = [ ];\n                for(var key of Object.keys(doc.versions)) {\n                    urls.push(UrlJoin(sharedInstance.config.server.host,\n                        req.params.bucket, req.params.filename, `?v=${key}`));\n                }\n                res.send(urls);\n            }\n        });\n        resolve({ });\n    });\n\n}\n\nexport default listversion;"],"sourceRoot":"/source/"}