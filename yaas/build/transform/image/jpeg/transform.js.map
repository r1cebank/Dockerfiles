{"version":3,"sources":["transform/image/jpeg/transform.js"],"names":[],"mappings":"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","file":"transform/image/jpeg/transform.js","sourcesContent":["/**\n * Created by r1cebank on 8/23/15.\n */\n\n/*!\n *  This will transform the images and output\n */\n\nimport AppSingleton     from '../../../util/appsingleton';\nimport Promise          from 'bluebird';\nimport Fs               from 'fs';\nimport lwip             from 'lwip';\nimport Path             from 'path';\nimport _                from 'lodash';\n\n//  Old require still using require\nvar hash = require('json-hash');\n\nfunction transform(req, file, version) {\n\n    let TAG = 'transform:image:jpeg';\n\n    var sharedInstance = AppSingleton.getInstance();\n\n    return new Promise((resolve, reject) => {\n\n        // If no param supplied, resolve\n        if(_.isEmpty(req)) {\n            sharedInstance.L.info(TAG, \"no transform options provided.\");\n            resolve(file);\n        } else {\n            lwip.open(file, function (err, image) {\n                if(err) {\n                    //  If there is error, return the original file\n                    resolve(file);\n                }\n                var batch = image.batch();\n\n                //  Needed the version number to enforce the files don't collide.\n                req.v = version;\n                var filename = Path.join(process.cwd(), sharedInstance.config.server.storage.processed, `${hash.digest(req)}.jpeg`);\n                //  Needs to delete v to avoid confusions\n                delete req.v;\n\n                Fs.stat(filename, (err, stat) => {\n                    //  If exists in the system, dont bother processing it\n                    if(err) {\n                        //  All processing goes here.\n                        for(var key of Object.keys(req)) {\n                            try {\n\n                                /*!\n                                 *  I am aware that having a big switch statement is not ideal,\n                                 *  but thinking about having a chainable pipe with promises is just too\n                                 *  much code.\n                                 *  If we decides that chainable transform is needed, i am happy to implement\n                                 */\n                                switch(key) {\n                                    case \"scale\":\n                                        //  Scale the image\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.scale(Number(req[key]));\n                                        }\n                                        break;\n                                    case \"crop\":\n                                        //  Crop the image\n                                        if(JSON.parse(req[key]) instanceof Array) {\n                                            let array = JSON.parse(req[key]);\n                                            if(array.length == 2) {\n                                                batch = batch.crop(array[0], array[1]);\n                                            } else if(array.length == 4) {\n                                                batch = batch.crop(array[0], array[1], array[2], array[3]);\n                                            }\n                                        }\n                                        break;\n                                    case \"rotate\":\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.rotate(Number(req[key]), 'white');\n                                        }\n                                        break;\n                                    case \"blur\":\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.blur(Number(req[key]));\n                                        }\n                                        break;\n                                    case \"sharpen\":\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.sharpen(Number(req[key]));\n                                        }\n                                        break;\n                                    case \"mirror\":\n                                        let actions = ['x', 'y', 'xy'];\n                                        if(_.includes(actions, req[key])) {\n                                            batch = batch.mirror(req[key]);\n                                        }\n                                        break;\n                                    case \"saturate\":\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.saturate(Number(req[key]));\n                                        }\n                                        break;\n                                    case \"lighten\":\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.lighten(Number(req[key]));\n                                        }\n                                        break;\n                                    case \"darken\":\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.darken(Number(req[key]));\n                                        }\n                                        break;\n                                    case \"hue\":\n                                        if(!isNaN(req[key])) {\n                                            batch = batch.hue(Number(req[key]));\n                                        }\n                                        break;\n                                    default:\n                                        sharedInstance.L.warn(TAG, `unsupported action ${key}.`);\n                                }\n                            } catch (e) {\n                                /*! After a error is caught, reject with error and do whatever to recover\n                                 *  transform.js (line 31-32)\n                                 */\n\n                                reject(e);\n                                return;\n                            }\n\n                        }\n\n                        batch.writeFile(filename, function (err) {\n                            if(err) {\n                                sharedInstance.L.error(TAG, `error occured: ${err.toString()}`);\n                                resolve(file);\n                            }\n                            else {\n                                resolve(filename);\n                            }\n                        });\n                    } else {\n                        sharedInstance.L.info(TAG, 'skip processing since file exists');\n                        resolve(filename);\n                    }\n                });\n\n            });\n        }\n\n    });\n}\n\nexport default transform;\n"],"sourceRoot":"/source/"}