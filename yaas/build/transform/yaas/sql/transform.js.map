{"version":3,"sources":["transform/yaas/sql/transform.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;gCAQ6B,4BAA4B;;;;wBAC5B,UAAU;;;;kBACV,IAAI;;;;wBACJ,UAAU;;;;wBACV,UAAU;;;;oBACV,MAAM;;;;sBACN,QAAQ;;;;qBACR,OAAO;;;;4BACP,gBAAgB;;;;;AAG7C,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEhC,SAAS,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;;AAEnC,QAAI,GAAG,GAAG,oBAAoB,CAAC;;AAE/B,QAAI,cAAc,GAAG,8BAAa,WAAW,EAAE,CAAC;;AAEhD,WAAO,0BAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,WAAG,CAAC,CAAC,GAAG,OAAO,CAAC;AAChB,YAAI,QAAQ,GAAG,kBAAK,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAK,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAQ,CAAC;;AAEpH,eAAO,GAAG,CAAC,CAAC,CAAC;;;AAGb,8BAAS,QAAQ,CAAC,IAAI,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE;AACvC,gBAAG,CAAC,GAAG,EAAE;;;AAGL,oBAAI,UAAU,GAAG,mBAAM,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;AAEzD,0BAAU,CAAC,OAAO,EAAE,CAAC;;AAErB,oBAAI,KAAK,GAAG,0BAAa,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;;AAErF,0BAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AACnC,wBAAG,GAAG,EAAE;AACJ,sCAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,uBAAqB,GAAG,CAAC,QAAQ,EAAE,CAAG,CAAC;AACjE,+BAAO,CAAC,EAAC,KAAK,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;qBACpC;AACD,2BAAO,CAAC,IAAI,CAAC,CAAC;;AAEd,8BAAU,CAAC,OAAO,EAAE,CAAC;iBACxB,CAAC,CAAC;aACN,MAAM;AACH,8BAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,uBAAqB,GAAG,CAAC,QAAQ,EAAE,CAAG,CAAC;AACjE,uBAAO,CAAC,EAAC,KAAK,EAAG,GAAG,CAAC,QAAQ,EAAE,EAAC,CAAC,CAAC;aACrC;SACJ,CAAC,CAAC;KACN,CAAC,CAAC;CACN;;qBAEc,SAAS","file":"transform/yaas/sql/transform.js","sourcesContent":["/**\n * Created by r1cebank on 8/30/15.\n */\n\n/*!\n *  This will transform the ysql object into actual database query result\n */\n\nimport AppSingleton     from '../../../util/appsingleton';\nimport Promise          from 'bluebird';\nimport Fs               from 'fs';\nimport JPath            from 'jsonpath';\nimport JsonFile         from 'jsonfile';\nimport Path             from 'path';\nimport _                from 'lodash';\nimport MySQL            from 'mysql';\nimport QueryBuilder     from './queryBuilder';\n\n//  Old require still using require\nvar hash = require('json-hash');\n\nfunction transform(req, file, version) {\n\n    let TAG = 'transform:yaas:sql';\n\n    var sharedInstance = AppSingleton.getInstance();\n\n    return new Promise((resolve, reject) => {\n        req.v = version;\n        var filename = Path.join(process.cwd(), sharedInstance.config.server.storage.processed, `${hash.digest(req)}.ysql`);\n        //  Needs to delete v to avoid confusions\n        delete req.v;\n        //  If exists in the system, don't bother processing it\n        //  Read this json file\n        JsonFile.readFile(file, function(err, obj) {\n            if(!err) {\n                //  No error while reading ysql, continue to processing\n                //  Open a new connection -> cache the connection -> query -> grab the results\n                var connection = MySQL.createConnection(obj.data.server);\n                //  Connect to MySQL\n                connection.connect();\n                //  For queries have placeholders, replace them with real values\n                var query = QueryBuilder.buildQuery(obj.data.query, obj.data.input, req, connection);\n                //  TODO: Should I persist the connections?\n                connection.query(query, (err, rows) => {\n                    if(err) {\n                        sharedInstance.L.error(TAG, `error occurred: ${err.toString()}`);\n                        resolve({error: err.toString()});\n                    }\n                    resolve(rows);\n                    //  Close the connection\n                    connection.destroy();\n                });\n            } else {\n                sharedInstance.L.error(TAG, `error occurred: ${err.toString()}`);\n                resolve({error : err.toString()});\n            }\n        });\n    });\n}\n\nexport default transform;"],"sourceRoot":"/source/"}