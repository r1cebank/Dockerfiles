{"version":3,"sources":["transform/transform.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;gCAQiC,sBAAsB;;;;kBACtB,IAAI;;;;oBACJ,MAAM;;;;AAEvC,SAAS,SAAS,CAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;;AAE/C,QAAI,GAAG,GAAG,WAAW,CAAC;;AAEtB,QAAI,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;AACvB,QAAI,GAAG,GAAK,IAAI,IAAI,EAAE,CAAC;;AAEvB,QAAI,cAAc,GAAG,8BAAa,WAAW,EAAE,CAAC;;;;;AAKhD,QAAI,aAAa,GAAG,kBAAK,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;;;AAGjG,oBAAG,IAAI,CAAC,aAAa,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;;AAElC,YAAG,CAAC,GAAG,EAAE;;;AAGL,mBAAO,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;;AAEtD,oBAAG,OAAO,IAAI,KAAK,QAAQ,EAAE;;AAEzB,kCAAc,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,4BAA4B,CAAC,CAAC;AAC5D,uBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAClB,MAAM;;AAEH,kCAAc,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC;AACxD,uBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACf,uBAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBACtB;AACD,mBAAG,GAAG,IAAI,IAAI,EAAE,CAAC;AACjB,8BAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,wBAAqB,GAAG,GAAC,KAAK,CAAA,QAAK,CAAC;aAChE,CAAC,SAAM,CAAC,UAAC,CAAC,EAAK;;AAEZ,mBAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACnB,8BAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC7C,CAAC,CAAC,IAAI,EAAE,CAAC;SACb,MAAM;;AAEH,eAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACtB;KACJ,CAAC,CAAC;CACN;;qBAEc,EAAC,SAAS,EAAT,SAAS,EAAC","file":"transform/transform.js","sourcesContent":["/**\n * Created by r1cebank on 8/23/15.\n */\n\n/*!\n *  This is the transform function, it takes the file type and determines if the transform file exists\n *  If file exist, process and send the processed file\n */\nimport AppSingleton         from '../util/appsingleton';\nimport Fs                   from 'fs';\nimport Path                 from 'path';\n\nfunction transform (res, type, req, file, version) {\n\n    let TAG = 'transform';\n\n    let start = new Date();\n    var end   = new Date();\n\n    var sharedInstance = AppSingleton.getInstance();\n\n    //  Ger new filename with extensions\n\n    //  for image/jpeg type, the transform file will be stored in /image/jpeg/transform.js\n    let transformFile = Path.join(__dirname, type.split('/')[0], type.split('/')[1], `transform.js`);\n\n    //  Do all the processing, and return the transformed file\n    Fs.stat(transformFile, (err, stat) => {\n        //  If exists in the system, dont bother processing it\n        if(!err) {\n\n            //  Call the transformation file and get the final processed file.\n            require(transformFile)(req, file, version).then((file) => {\n                //  After processing, the output can be two types, JSON or filepath\n                if(typeof file === 'object') {\n                    //  If it is object, then just send it to as response.\n                    sharedInstance.L.verbose(TAG, 'sending result as response');\n                    res.send(file);\n                } else {\n                    //  If it is not, then send as a file.\n                    sharedInstance.L.verbose(TAG, 'sending result as file');\n                    res.type(type);\n                    res.sendFile(file);\n                }\n                end = new Date();\n                sharedInstance.L.info(TAG, `Processing time ${end-start}ms`);\n            }).catch((e) => {\n                //  If error is caught, send the original file\n                res.sendFile(file);\n                sharedInstance.L.error(TAG, e.toString());\n            }).done();\n        } else {\n            //  File don't support transform\n            res.sendFile(file);\n        }\n    });\n}\n\nexport default {transform};"],"sourceRoot":"/source/"}