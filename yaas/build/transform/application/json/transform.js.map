{"version":3,"sources":["transform/application/json/transform.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;gCAS6B,4BAA4B;;;;wBAC5B,UAAU;;;;kBACV,IAAI;;;;wBACJ,UAAU;;;;wBACV,UAAU;;;;oBACV,MAAM;;;;sBACN,QAAQ;;;;;AAGrC,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEhC,SAAS,SAAS,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;;AAEnC,QAAI,GAAG,GAAG,4BAA4B,CAAC;;AAEvC,QAAI,cAAc,GAAG,8BAAa,WAAW,EAAE,CAAC;;AAEhD,WAAO,0BAAY,UAAC,OAAO,EAAE,MAAM,EAAK;;AAEpC,YAAG,oBAAE,OAAO,CAAC,GAAG,CAAC,EAAE;AACf,0BAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,gCAAgC,CAAC,CAAC;AAC7D,mBAAO,CAAC,IAAI,CAAC,CAAC;SACjB,MAAM;;AAEH,eAAG,CAAC,CAAC,GAAG,OAAO,CAAC;AAChB,gBAAI,QAAQ,GAAG,kBAAK,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAK,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAQ,CAAC;;AAEpH,mBAAO,GAAG,CAAC,CAAC,CAAC;AACb,4BAAG,IAAI,CAAC,QAAQ,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;;AAE7B,oBAAI,GAAG,EAAE;;AAEL,0CAAS,QAAQ,CAAC,IAAI,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE;AACvC,4BAAG,CAAC,GAAG,EAAE;;;AAGL,gCAAI,MAAM,GAAG,oBAAE,KAAK,CAAC,GAAG,CAAC,CAAC;;;;;;AAC1B,qDAAe,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,8HAAE;wCAAzB,GAAG;;AACP,4CAAO,GAAG;AACN,6CAAK,OAAO;AACR,kDAAM,GAAG,sBAAM,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;AACxC,kDAAM;AAAA,AACV;AACI,0DAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,0BAAwB,GAAG,OAAI,CAAC;AAAA,qCAChE;iCACJ;;;;;;;;;;;;;;;;;AAED,kDAAS,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,UAAU,GAAG,EAAE;AAChD,oCAAG,CAAC,GAAG,EAAE;AACL,2CAAO,CAAC,QAAQ,CAAC,CAAC;iCACrB,MAAM;AACH,kDAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,sBAAoB,GAAG,CAAC,QAAQ,EAAE,CAAG,CAAC;AAChE,2CAAO,CAAC,IAAI,CAAC,CAAC;iCACjB;6BACJ,CAAC,CAAC;yBACN,MAAM;AACH,0CAAc,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,sBAAoB,GAAG,CAAC,QAAQ,EAAE,CAAG,CAAC;AAChE,mCAAO,CAAC,IAAI,CAAC,CAAC;yBACjB;qBACJ,CAAC,CAAC;iBACN,MAAM;AACH,kCAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,mCAAmC,CAAC,CAAC;AAChE,2BAAO,CAAC,QAAQ,CAAC,CAAC;iBACrB;aACJ,CAAC,CAAC;SACN;KACJ,CAAC,CAAC;CACN;;qBAEc,SAAS","file":"transform/application/json/transform.js","sourcesContent":["/**\n * Created by r1cebank on 8/28/15.\n */\n\n/*!\n *  This will transform the json\n *  currently supports jsonpath query\n */\n\nimport AppSingleton     from '../../../util/appsingleton';\nimport Promise          from 'bluebird';\nimport Fs               from 'fs';\nimport JPath            from 'jsonpath';\nimport JsonFile         from 'jsonfile';\nimport Path             from 'path';\nimport _                from 'lodash';\n\n//  Old require still using require\nvar hash = require('json-hash');\n\nfunction transform(req, file, version) {\n\n    let TAG = 'transform:application:json';\n\n    var sharedInstance = AppSingleton.getInstance();\n\n    return new Promise((resolve, reject) => {\n        // If no param supplied, resolve\n        if(_.isEmpty(req)) {\n            sharedInstance.L.info(TAG, \"no transform options provided.\");\n            resolve(file);\n        } else {\n            //  Needed the version number to enforce the files don't collide.\n            req.v = version;\n            var filename = Path.join(process.cwd(), sharedInstance.config.server.storage.processed, `${hash.digest(req)}.json`);\n            //  Needs to delete v to avoid confusions\n            delete req.v;\n            Fs.stat(filename, (err, stat) => {\n                //  If exists in the system, don't bother processing it\n                if (err) {\n                    //  Read this json file\n                    JsonFile.readFile(file, function(err, obj) {\n                        if(!err) {\n\n                            //  This might be used if we have more than one transform params\n                            var result = _.clone(obj);\n                            for(var key of Object.keys(req)) {\n                                switch(key) {\n                                    case \"query\":\n                                        result = JPath.query(result, req.query);\n                                        break;\n                                    default:\n                                        sharedInstance.L.warn(TAG, `unsupported action ${key}.`);\n                                }\n                            }\n                            //  Finally write the file\n                            JsonFile.writeFile(filename, result, function (err) {\n                                if(!err) {\n                                    resolve(filename);\n                                } else {\n                                    sharedInstance.L.error(TAG, `error occured: ${err.toString()}`);\n                                    resolve(file);\n                                }\n                            });\n                        } else {\n                            sharedInstance.L.error(TAG, `error occured: ${err.toString()}`);\n                            resolve(file);\n                        }\n                    });\n                } else {\n                    sharedInstance.L.info(TAG, 'skip processing since file exists');\n                    resolve(filename);\n                }\n            });\n        }\n    });\n}\n\nexport default transform;"],"sourceRoot":"/source/"}